### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  """User who authored the comment"""
  author: User
  createdAt: DateTime

  """Unique identifier for the comment"""
  id: String

  """Task associated with the comment, if any"""
  task: Task

  """Text content of the comment"""
  text: String
  updatedAt: DateTime
}

input CommentInput {
  """User who authored the comment"""
  author: UserInput
  createdById: String
  id: String

  """Task associated with the comment, if any"""
  task: TaskInput
  text: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input IDConnect {
  id: ID
}

type Mutation {
  createComment(data: CommentInput!): Comment
  createTask(data: TaskInput!): Task
  createTaskRole(data: TaskRoleInput!): TaskRole
  createUser(data: UserInput!): User
  createUserTask(data: UserTaskInput!): UserTask
  deleteComment(id: String!): Comment
  deleteTask(id: String!): Task
  deleteTaskRole(id: String!): TaskRole
  deleteUser(id: String!): User
  deleteUserTask(id: String!): UserTask
  updateComment(data: CommentInput!, id: String!): Comment
  updateTask(data: TaskInput!, id: String!): Task
  updateUser(data: UserInput!, id: String!): User
  updateUserTask(data: UserTaskInput!, id: String!): UserTask
}

type Query {
  comments: [Comment]
  taskById(id: String): Task
  taskRoles: [TaskRole]
  tasks: [Task]
  user(id: String!): User
  userTaskById(id: String!): UserTask
  userTasks: [UserTask]
  users: [User]
}

type Task {
  comments: [Comment]
  createdAt: DateTime
  createdById: String
  dueDate: DateTime
  id: String
  notes: String
  parentTask: Task
  parentTaskId: String
  priority: String
  status: String
  subtasks: [Task]
  title: String
  updatedAt: DateTime
  userTasks: [UserTask]
}

input TaskInput {
  comments: [CommentInput]
  createdById: String
  dueDate: DateTime
  id: String
  notes: String
  parentTask: TaskInput
  priority: String
  status: String
  subtasks: [TaskInput]
  title: String
  userTasks: [UserTaskInput]
}

type TaskRole {
  id: String
  role: String
}

input TaskRoleInput {
  id: String
  role: String
}

input TaskWhereInput {
  createdById: String
  id: String
  parentTaskId: ID
}

type User {
  """Comments by the user"""
  comments: [Comment]
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  middleName: String
  name: String
  password: String

  """Tasks assigned to the user"""
  tasks: [Task]

  """Tasks created by the user"""
  tasksCreated: [Task]
  updatedAt: DateTime
}

input UserInput {
  email: String
  firstName: String
  id: String
  lastName: String
  middleName: String
  name: String
  password: String
}

type UserTask {
  createdAt: DateTime
  createdById: String
  id: String
  task: Task
  taskId: String
  taskRole: TaskRole
  taskRoleId: String
  updatedAt: DateTime
  user: User
  userId: String
}

input UserTaskInput {
  createdById: String
  id: String
  task: TaskInput
  taskRole: TaskRoleInput
  user: UserInput
}